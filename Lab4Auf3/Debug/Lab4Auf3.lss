
Lab4Auf3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000468  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000004dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000701  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000644  00000000  00000000  00000c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025a  00000000  00000000  000012c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001524  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000396  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000196  00000000  00000000  0000199e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  88:	0c 94 32 02 	jmp	0x464	; 0x464 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <startConversion>:
double analogWert = 0;
int angle = 0;

void startConversion(){
	// Startet die Auslesung
	ADCSRA |= (1 << ADSC); 
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <__vector_11>:
}
 //Timer1 Overflow
ISR(TIMER1_COMPA_vect){
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	2f 93       	push	r18
  a8:	3f 93       	push	r19
  aa:	4f 93       	push	r20
  ac:	5f 93       	push	r21
  ae:	6f 93       	push	r22
  b0:	7f 93       	push	r23
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	af 93       	push	r26
  b8:	bf 93       	push	r27
  ba:	ef 93       	push	r30
  bc:	ff 93       	push	r31
	//umrechen von Analog Wert in Grad
	angle = (analogWert/1024)  * 180; 
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	40 e8       	ldi	r20, 0x80	; 128
  c4:	5a e3       	ldi	r21, 0x3A	; 58
  c6:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <analogWert>
  ca:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <analogWert+0x1>
  ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <analogWert+0x2>
  d2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <analogWert+0x3>
  d6:	0e 94 9d 01 	call	0x33a	; 0x33a <__mulsf3>
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	44 e3       	ldi	r20, 0x34	; 52
  e0:	53 e4       	ldi	r21, 0x43	; 67
  e2:	0e 94 9d 01 	call	0x33a	; 0x33a <__mulsf3>
  e6:	0e 94 01 01 	call	0x202	; 0x202 <__fixsfsi>
  ea:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ee:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	// einstellen von PWM-Signal mit Grad
	OCR1A= 1000 + ((4100/180) * angle); 
  f2:	26 e1       	ldi	r18, 0x16	; 22
  f4:	26 9f       	mul	r18, r22
  f6:	a0 01       	movw	r20, r0
  f8:	27 9f       	mul	r18, r23
  fa:	50 0d       	add	r21, r0
  fc:	11 24       	eor	r1, r1
  fe:	ca 01       	movw	r24, r20
 100:	88 51       	subi	r24, 0x18	; 24
 102:	9c 4f       	sbci	r25, 0xFC	; 252
 104:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 108:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 10c:	ff 91       	pop	r31
 10e:	ef 91       	pop	r30
 110:	bf 91       	pop	r27
 112:	af 91       	pop	r26
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	7f 91       	pop	r23
 11a:	6f 91       	pop	r22
 11c:	5f 91       	pop	r21
 11e:	4f 91       	pop	r20
 120:	3f 91       	pop	r19
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <__vector_21>:
//ADC fertig mit Auslesen
ISR(ADC_vect){ 
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
	// analogwert in Variable speichern
	analogWert = ADC; 
 150:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 154:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 37 01 	call	0x26e	; 0x26e <__floatunsisf>
 160:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <analogWert>
 164:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <analogWert+0x1>
 168:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <analogWert+0x2>
 16c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <analogWert+0x3>
}
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	7f 91       	pop	r23
 17e:	6f 91       	pop	r22
 180:	5f 91       	pop	r21
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <main>:

int main(void){
	//OCR1A als Ausgang setzen - D8 als Input setzen
	DDRB = (1<<1) | (0<<0); 
 192:	22 e0       	ldi	r18, 0x02	; 2
 194:	24 b9       	out	0x04, r18	; 4
	// Interrupt fÃ¼r D8 Aktivieren
	PORTB = (1<<0); 
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	85 b9       	out	0x05, r24	; 5
	//Timer1 Einstellungen
	 //non-inverting PWM 
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11); 
 19a:	e0 e8       	ldi	r30, 0x80	; 128
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	82 6a       	ori	r24, 0xA2	; 162
 1a2:	80 83       	st	Z, r24
	 //PRESCALER=64 MODE 14(FAST PWM)
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11);
 1a4:	e1 e8       	ldi	r30, 0x81	; 129
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	8a 61       	ori	r24, 0x1A	; 26
 1ac:	80 83       	st	Z, r24
	 //fPWM=50Hz
	ICR1=40000; 
 1ae:	80 e4       	ldi	r24, 0x40	; 64
 1b0:	9c e9       	ldi	r25, 0x9C	; 156
 1b2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1b6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	 //PWM Pins as Output
	DDRB|=0xFF;  
 1ba:	84 b1       	in	r24, 0x04	; 4
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	84 b9       	out	0x04, r24	; 4
	//0 degree (Startwert setzen)
	OCR1A= 1000 + ((4200/180) * angle);  
 1c0:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c4:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c8:	37 e1       	ldi	r19, 0x17	; 23
 1ca:	34 9f       	mul	r19, r20
 1cc:	c0 01       	movw	r24, r0
 1ce:	35 9f       	mul	r19, r21
 1d0:	90 0d       	add	r25, r0
 1d2:	11 24       	eor	r1, r1
 1d4:	88 51       	subi	r24, 0x18	; 24
 1d6:	9c 4f       	sbci	r25, 0xFC	; 252
 1d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	//interrupt OCR1A setzen
	TIMSK1 = (1<<OCIE1A); 
 1e0:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	// ADC einstellungen
	//(A5) und externe REF - Spannung
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); 
 1e4:	85 e4       	ldi	r24, 0x45	; 69
 1e6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// Enable - ADC Interrupt - ADC Prescaler auf 4
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS1); 
 1ea:	8a e8       	ldi	r24, 0x8A	; 138
 1ec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	// Input aktivieren (A5)
	DIDR0 = (1 << ADC5D); 
 1f0:	80 e2       	ldi	r24, 0x20	; 32
 1f2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	// global interrupts enable
	sei(); 
 1f6:	78 94       	sei
		
	while(1){
		//Pin D8 als Button-Pin
		if(!(PINB & (1<<0))){ 
 1f8:	18 99       	sbic	0x03, 0	; 3
 1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <main+0x66>
			// ADC Wert auslesen
            startConversion(); 
 1fc:	0e 94 48 00 	call	0x90	; 0x90 <startConversion>
 200:	fb cf       	rjmp	.-10     	; 0x1f8 <main+0x66>

00000202 <__fixsfsi>:
 202:	0e 94 08 01 	call	0x210	; 0x210 <__fixunssfsi>
 206:	68 94       	set
 208:	b1 11       	cpse	r27, r1
 20a:	0c 94 97 01 	jmp	0x32e	; 0x32e <__fp_szero>
 20e:	08 95       	ret

00000210 <__fixunssfsi>:
 210:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__fp_splitA>
 214:	88 f0       	brcs	.+34     	; 0x238 <__fixunssfsi+0x28>
 216:	9f 57       	subi	r25, 0x7F	; 127
 218:	98 f0       	brcs	.+38     	; 0x240 <__fixunssfsi+0x30>
 21a:	b9 2f       	mov	r27, r25
 21c:	99 27       	eor	r25, r25
 21e:	b7 51       	subi	r27, 0x17	; 23
 220:	b0 f0       	brcs	.+44     	; 0x24e <__fixunssfsi+0x3e>
 222:	e1 f0       	breq	.+56     	; 0x25c <__fixunssfsi+0x4c>
 224:	66 0f       	add	r22, r22
 226:	77 1f       	adc	r23, r23
 228:	88 1f       	adc	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	1a f0       	brmi	.+6      	; 0x234 <__fixunssfsi+0x24>
 22e:	ba 95       	dec	r27
 230:	c9 f7       	brne	.-14     	; 0x224 <__fixunssfsi+0x14>
 232:	14 c0       	rjmp	.+40     	; 0x25c <__fixunssfsi+0x4c>
 234:	b1 30       	cpi	r27, 0x01	; 1
 236:	91 f0       	breq	.+36     	; 0x25c <__fixunssfsi+0x4c>
 238:	0e 94 96 01 	call	0x32c	; 0x32c <__fp_zero>
 23c:	b1 e0       	ldi	r27, 0x01	; 1
 23e:	08 95       	ret
 240:	0c 94 96 01 	jmp	0x32c	; 0x32c <__fp_zero>
 244:	67 2f       	mov	r22, r23
 246:	78 2f       	mov	r23, r24
 248:	88 27       	eor	r24, r24
 24a:	b8 5f       	subi	r27, 0xF8	; 248
 24c:	39 f0       	breq	.+14     	; 0x25c <__fixunssfsi+0x4c>
 24e:	b9 3f       	cpi	r27, 0xF9	; 249
 250:	cc f3       	brlt	.-14     	; 0x244 <__fixunssfsi+0x34>
 252:	86 95       	lsr	r24
 254:	77 95       	ror	r23
 256:	67 95       	ror	r22
 258:	b3 95       	inc	r27
 25a:	d9 f7       	brne	.-10     	; 0x252 <__fixunssfsi+0x42>
 25c:	3e f4       	brtc	.+14     	; 0x26c <__fixunssfsi+0x5c>
 25e:	90 95       	com	r25
 260:	80 95       	com	r24
 262:	70 95       	com	r23
 264:	61 95       	neg	r22
 266:	7f 4f       	sbci	r23, 0xFF	; 255
 268:	8f 4f       	sbci	r24, 0xFF	; 255
 26a:	9f 4f       	sbci	r25, 0xFF	; 255
 26c:	08 95       	ret

0000026e <__floatunsisf>:
 26e:	e8 94       	clt
 270:	09 c0       	rjmp	.+18     	; 0x284 <__floatsisf+0x12>

00000272 <__floatsisf>:
 272:	97 fb       	bst	r25, 7
 274:	3e f4       	brtc	.+14     	; 0x284 <__floatsisf+0x12>
 276:	90 95       	com	r25
 278:	80 95       	com	r24
 27a:	70 95       	com	r23
 27c:	61 95       	neg	r22
 27e:	7f 4f       	sbci	r23, 0xFF	; 255
 280:	8f 4f       	sbci	r24, 0xFF	; 255
 282:	9f 4f       	sbci	r25, 0xFF	; 255
 284:	99 23       	and	r25, r25
 286:	a9 f0       	breq	.+42     	; 0x2b2 <__floatsisf+0x40>
 288:	f9 2f       	mov	r31, r25
 28a:	96 e9       	ldi	r25, 0x96	; 150
 28c:	bb 27       	eor	r27, r27
 28e:	93 95       	inc	r25
 290:	f6 95       	lsr	r31
 292:	87 95       	ror	r24
 294:	77 95       	ror	r23
 296:	67 95       	ror	r22
 298:	b7 95       	ror	r27
 29a:	f1 11       	cpse	r31, r1
 29c:	f8 cf       	rjmp	.-16     	; 0x28e <__floatsisf+0x1c>
 29e:	fa f4       	brpl	.+62     	; 0x2de <__floatsisf+0x6c>
 2a0:	bb 0f       	add	r27, r27
 2a2:	11 f4       	brne	.+4      	; 0x2a8 <__floatsisf+0x36>
 2a4:	60 ff       	sbrs	r22, 0
 2a6:	1b c0       	rjmp	.+54     	; 0x2de <__floatsisf+0x6c>
 2a8:	6f 5f       	subi	r22, 0xFF	; 255
 2aa:	7f 4f       	sbci	r23, 0xFF	; 255
 2ac:	8f 4f       	sbci	r24, 0xFF	; 255
 2ae:	9f 4f       	sbci	r25, 0xFF	; 255
 2b0:	16 c0       	rjmp	.+44     	; 0x2de <__floatsisf+0x6c>
 2b2:	88 23       	and	r24, r24
 2b4:	11 f0       	breq	.+4      	; 0x2ba <__floatsisf+0x48>
 2b6:	96 e9       	ldi	r25, 0x96	; 150
 2b8:	11 c0       	rjmp	.+34     	; 0x2dc <__floatsisf+0x6a>
 2ba:	77 23       	and	r23, r23
 2bc:	21 f0       	breq	.+8      	; 0x2c6 <__floatsisf+0x54>
 2be:	9e e8       	ldi	r25, 0x8E	; 142
 2c0:	87 2f       	mov	r24, r23
 2c2:	76 2f       	mov	r23, r22
 2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__floatsisf+0x5e>
 2c6:	66 23       	and	r22, r22
 2c8:	71 f0       	breq	.+28     	; 0x2e6 <__floatsisf+0x74>
 2ca:	96 e8       	ldi	r25, 0x86	; 134
 2cc:	86 2f       	mov	r24, r22
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	2a f0       	brmi	.+10     	; 0x2de <__floatsisf+0x6c>
 2d4:	9a 95       	dec	r25
 2d6:	66 0f       	add	r22, r22
 2d8:	77 1f       	adc	r23, r23
 2da:	88 1f       	adc	r24, r24
 2dc:	da f7       	brpl	.-10     	; 0x2d4 <__floatsisf+0x62>
 2de:	88 0f       	add	r24, r24
 2e0:	96 95       	lsr	r25
 2e2:	87 95       	ror	r24
 2e4:	97 f9       	bld	r25, 7
 2e6:	08 95       	ret

000002e8 <__fp_split3>:
 2e8:	57 fd       	sbrc	r21, 7
 2ea:	90 58       	subi	r25, 0x80	; 128
 2ec:	44 0f       	add	r20, r20
 2ee:	55 1f       	adc	r21, r21
 2f0:	59 f0       	breq	.+22     	; 0x308 <__fp_splitA+0x10>
 2f2:	5f 3f       	cpi	r21, 0xFF	; 255
 2f4:	71 f0       	breq	.+28     	; 0x312 <__fp_splitA+0x1a>
 2f6:	47 95       	ror	r20

000002f8 <__fp_splitA>:
 2f8:	88 0f       	add	r24, r24
 2fa:	97 fb       	bst	r25, 7
 2fc:	99 1f       	adc	r25, r25
 2fe:	61 f0       	breq	.+24     	; 0x318 <__fp_splitA+0x20>
 300:	9f 3f       	cpi	r25, 0xFF	; 255
 302:	79 f0       	breq	.+30     	; 0x322 <__fp_splitA+0x2a>
 304:	87 95       	ror	r24
 306:	08 95       	ret
 308:	12 16       	cp	r1, r18
 30a:	13 06       	cpc	r1, r19
 30c:	14 06       	cpc	r1, r20
 30e:	55 1f       	adc	r21, r21
 310:	f2 cf       	rjmp	.-28     	; 0x2f6 <__fp_split3+0xe>
 312:	46 95       	lsr	r20
 314:	f1 df       	rcall	.-30     	; 0x2f8 <__fp_splitA>
 316:	08 c0       	rjmp	.+16     	; 0x328 <__fp_splitA+0x30>
 318:	16 16       	cp	r1, r22
 31a:	17 06       	cpc	r1, r23
 31c:	18 06       	cpc	r1, r24
 31e:	99 1f       	adc	r25, r25
 320:	f1 cf       	rjmp	.-30     	; 0x304 <__fp_splitA+0xc>
 322:	86 95       	lsr	r24
 324:	71 05       	cpc	r23, r1
 326:	61 05       	cpc	r22, r1
 328:	08 94       	sec
 32a:	08 95       	ret

0000032c <__fp_zero>:
 32c:	e8 94       	clt

0000032e <__fp_szero>:
 32e:	bb 27       	eor	r27, r27
 330:	66 27       	eor	r22, r22
 332:	77 27       	eor	r23, r23
 334:	cb 01       	movw	r24, r22
 336:	97 f9       	bld	r25, 7
 338:	08 95       	ret

0000033a <__mulsf3>:
 33a:	0e 94 b0 01 	call	0x360	; 0x360 <__mulsf3x>
 33e:	0c 94 21 02 	jmp	0x442	; 0x442 <__fp_round>
 342:	0e 94 13 02 	call	0x426	; 0x426 <__fp_pscA>
 346:	38 f0       	brcs	.+14     	; 0x356 <__mulsf3+0x1c>
 348:	0e 94 1a 02 	call	0x434	; 0x434 <__fp_pscB>
 34c:	20 f0       	brcs	.+8      	; 0x356 <__mulsf3+0x1c>
 34e:	95 23       	and	r25, r21
 350:	11 f0       	breq	.+4      	; 0x356 <__mulsf3+0x1c>
 352:	0c 94 0a 02 	jmp	0x414	; 0x414 <__fp_inf>
 356:	0c 94 10 02 	jmp	0x420	; 0x420 <__fp_nan>
 35a:	11 24       	eor	r1, r1
 35c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__fp_szero>

00000360 <__mulsf3x>:
 360:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__fp_split3>
 364:	70 f3       	brcs	.-36     	; 0x342 <__mulsf3+0x8>

00000366 <__mulsf3_pse>:
 366:	95 9f       	mul	r25, r21
 368:	c1 f3       	breq	.-16     	; 0x35a <__mulsf3+0x20>
 36a:	95 0f       	add	r25, r21
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	55 1f       	adc	r21, r21
 370:	62 9f       	mul	r22, r18
 372:	f0 01       	movw	r30, r0
 374:	72 9f       	mul	r23, r18
 376:	bb 27       	eor	r27, r27
 378:	f0 0d       	add	r31, r0
 37a:	b1 1d       	adc	r27, r1
 37c:	63 9f       	mul	r22, r19
 37e:	aa 27       	eor	r26, r26
 380:	f0 0d       	add	r31, r0
 382:	b1 1d       	adc	r27, r1
 384:	aa 1f       	adc	r26, r26
 386:	64 9f       	mul	r22, r20
 388:	66 27       	eor	r22, r22
 38a:	b0 0d       	add	r27, r0
 38c:	a1 1d       	adc	r26, r1
 38e:	66 1f       	adc	r22, r22
 390:	82 9f       	mul	r24, r18
 392:	22 27       	eor	r18, r18
 394:	b0 0d       	add	r27, r0
 396:	a1 1d       	adc	r26, r1
 398:	62 1f       	adc	r22, r18
 39a:	73 9f       	mul	r23, r19
 39c:	b0 0d       	add	r27, r0
 39e:	a1 1d       	adc	r26, r1
 3a0:	62 1f       	adc	r22, r18
 3a2:	83 9f       	mul	r24, r19
 3a4:	a0 0d       	add	r26, r0
 3a6:	61 1d       	adc	r22, r1
 3a8:	22 1f       	adc	r18, r18
 3aa:	74 9f       	mul	r23, r20
 3ac:	33 27       	eor	r19, r19
 3ae:	a0 0d       	add	r26, r0
 3b0:	61 1d       	adc	r22, r1
 3b2:	23 1f       	adc	r18, r19
 3b4:	84 9f       	mul	r24, r20
 3b6:	60 0d       	add	r22, r0
 3b8:	21 1d       	adc	r18, r1
 3ba:	82 2f       	mov	r24, r18
 3bc:	76 2f       	mov	r23, r22
 3be:	6a 2f       	mov	r22, r26
 3c0:	11 24       	eor	r1, r1
 3c2:	9f 57       	subi	r25, 0x7F	; 127
 3c4:	50 40       	sbci	r21, 0x00	; 0
 3c6:	9a f0       	brmi	.+38     	; 0x3ee <__mulsf3_pse+0x88>
 3c8:	f1 f0       	breq	.+60     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3ca:	88 23       	and	r24, r24
 3cc:	4a f0       	brmi	.+18     	; 0x3e0 <__mulsf3_pse+0x7a>
 3ce:	ee 0f       	add	r30, r30
 3d0:	ff 1f       	adc	r31, r31
 3d2:	bb 1f       	adc	r27, r27
 3d4:	66 1f       	adc	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	88 1f       	adc	r24, r24
 3da:	91 50       	subi	r25, 0x01	; 1
 3dc:	50 40       	sbci	r21, 0x00	; 0
 3de:	a9 f7       	brne	.-22     	; 0x3ca <__mulsf3_pse+0x64>
 3e0:	9e 3f       	cpi	r25, 0xFE	; 254
 3e2:	51 05       	cpc	r21, r1
 3e4:	80 f0       	brcs	.+32     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3e6:	0c 94 0a 02 	jmp	0x414	; 0x414 <__fp_inf>
 3ea:	0c 94 97 01 	jmp	0x32e	; 0x32e <__fp_szero>
 3ee:	5f 3f       	cpi	r21, 0xFF	; 255
 3f0:	e4 f3       	brlt	.-8      	; 0x3ea <__mulsf3_pse+0x84>
 3f2:	98 3e       	cpi	r25, 0xE8	; 232
 3f4:	d4 f3       	brlt	.-12     	; 0x3ea <__mulsf3_pse+0x84>
 3f6:	86 95       	lsr	r24
 3f8:	77 95       	ror	r23
 3fa:	67 95       	ror	r22
 3fc:	b7 95       	ror	r27
 3fe:	f7 95       	ror	r31
 400:	e7 95       	ror	r30
 402:	9f 5f       	subi	r25, 0xFF	; 255
 404:	c1 f7       	brne	.-16     	; 0x3f6 <__mulsf3_pse+0x90>
 406:	fe 2b       	or	r31, r30
 408:	88 0f       	add	r24, r24
 40a:	91 1d       	adc	r25, r1
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	97 f9       	bld	r25, 7
 412:	08 95       	ret

00000414 <__fp_inf>:
 414:	97 f9       	bld	r25, 7
 416:	9f 67       	ori	r25, 0x7F	; 127
 418:	80 e8       	ldi	r24, 0x80	; 128
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	08 95       	ret

00000420 <__fp_nan>:
 420:	9f ef       	ldi	r25, 0xFF	; 255
 422:	80 ec       	ldi	r24, 0xC0	; 192
 424:	08 95       	ret

00000426 <__fp_pscA>:
 426:	00 24       	eor	r0, r0
 428:	0a 94       	dec	r0
 42a:	16 16       	cp	r1, r22
 42c:	17 06       	cpc	r1, r23
 42e:	18 06       	cpc	r1, r24
 430:	09 06       	cpc	r0, r25
 432:	08 95       	ret

00000434 <__fp_pscB>:
 434:	00 24       	eor	r0, r0
 436:	0a 94       	dec	r0
 438:	12 16       	cp	r1, r18
 43a:	13 06       	cpc	r1, r19
 43c:	14 06       	cpc	r1, r20
 43e:	05 06       	cpc	r0, r21
 440:	08 95       	ret

00000442 <__fp_round>:
 442:	09 2e       	mov	r0, r25
 444:	03 94       	inc	r0
 446:	00 0c       	add	r0, r0
 448:	11 f4       	brne	.+4      	; 0x44e <__fp_round+0xc>
 44a:	88 23       	and	r24, r24
 44c:	52 f0       	brmi	.+20     	; 0x462 <__fp_round+0x20>
 44e:	bb 0f       	add	r27, r27
 450:	40 f4       	brcc	.+16     	; 0x462 <__fp_round+0x20>
 452:	bf 2b       	or	r27, r31
 454:	11 f4       	brne	.+4      	; 0x45a <__fp_round+0x18>
 456:	60 ff       	sbrs	r22, 0
 458:	04 c0       	rjmp	.+8      	; 0x462 <__fp_round+0x20>
 45a:	6f 5f       	subi	r22, 0xFF	; 255
 45c:	7f 4f       	sbci	r23, 0xFF	; 255
 45e:	8f 4f       	sbci	r24, 0xFF	; 255
 460:	9f 4f       	sbci	r25, 0xFF	; 255
 462:	08 95       	ret

00000464 <_exit>:
 464:	f8 94       	cli

00000466 <__stop_program>:
 466:	ff cf       	rjmp	.-2      	; 0x466 <__stop_program>
