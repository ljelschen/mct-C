
Lab4Auf3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000004de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000732  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000676  00000000  00000000  00000cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000272  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000015ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039a  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000196  00000000  00000000  00001a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  88:	0c 94 33 02 	jmp	0x466	; 0x466 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <startConversion>:
double dutyCycle = 0;
int angle = 0;

void startConversion()
{
	ADCSRA |= (1 << ADSC);
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <setupADC>:
}


void setupADC()
{
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2);
  9c:	85 e4       	ldi	r24, 0x45	; 69
  9e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (0 << ADPS0) | (1 << ADPS1) | (0 << ADPS2);
  a2:	8a e8       	ldi	r24, 0x8A	; 138
  a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	DIDR0 = (1 << ADC5D);
  a8:	80 e2       	ldi	r24, 0x20	; 32
  aa:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	
	startConversion();
  ae:	0e 94 48 00 	call	0x90	; 0x90 <startConversion>
  b2:	08 95       	ret

000000b4 <__vector_13>:
}


ISR(TIMER1_OVF_vect){
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
	sei();
  d6:	78 94       	sei
	angle = (dutyCycle/1024)  * 180;
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	40 e8       	ldi	r20, 0x80	; 128
  de:	5a e3       	ldi	r21, 0x3A	; 58
  e0:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <dutyCycle>
  e4:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <dutyCycle+0x1>
  e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dutyCycle+0x2>
  ec:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <dutyCycle+0x3>
  f0:	0e 94 9e 01 	call	0x33c	; 0x33c <__mulsf3>
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	44 e3       	ldi	r20, 0x34	; 52
  fa:	53 e4       	ldi	r21, 0x43	; 67
  fc:	0e 94 9e 01 	call	0x33c	; 0x33c <__mulsf3>
 100:	0e 94 02 01 	call	0x204	; 0x204 <__fixsfsi>
 104:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 108:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	OCR1A= 2000 + ((2000/180) * angle);  //90 degree
 10c:	2b e0       	ldi	r18, 0x0B	; 11
 10e:	26 9f       	mul	r18, r22
 110:	a0 01       	movw	r20, r0
 112:	27 9f       	mul	r18, r23
 114:	50 0d       	add	r21, r0
 116:	11 24       	eor	r1, r1
 118:	ca 01       	movw	r24, r20
 11a:	80 53       	subi	r24, 0x30	; 48
 11c:	98 4f       	sbci	r25, 0xF8	; 248
 11e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 122:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 126:	ff 91       	pop	r31
 128:	ef 91       	pop	r30
 12a:	bf 91       	pop	r27
 12c:	af 91       	pop	r26
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	7f 91       	pop	r23
 134:	6f 91       	pop	r22
 136:	5f 91       	pop	r21
 138:	4f 91       	pop	r20
 13a:	3f 91       	pop	r19
 13c:	2f 91       	pop	r18
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__vector_21>:

ISR(ADC_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	sei();
 16a:	78 94       	sei
	dutyCycle = ADC;
 16c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 170:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 38 01 	call	0x270	; 0x270 <__floatunsisf>
 17c:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <dutyCycle>
 180:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <dutyCycle+0x1>
 184:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dutyCycle+0x2>
 188:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <dutyCycle+0x3>
	startConversion();
 18c:	0e 94 48 00 	call	0x90	; 0x90 <startConversion>
}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <main>:

int main(void)
{
	DDRB = (1<<2);
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	84 b9       	out	0x04, r24	; 4
	//FOR TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 1b6:	e0 e8       	ldi	r30, 0x80	; 128
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	82 6a       	ori	r24, 0xA2	; 162
 1be:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11); //PRESCALER=64 MODE 14(FAST PWM)
 1c0:	e1 e8       	ldi	r30, 0x81	; 129
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	8a 61       	ori	r24, 0x1A	; 26
 1c8:	80 83       	st	Z, r24
	ICR1=40000;  //fPWM=50Hz
 1ca:	80 e4       	ldi	r24, 0x40	; 64
 1cc:	9c e9       	ldi	r25, 0x9C	; 156
 1ce:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1d2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	DDRB|=0xFF;   //PWM Pins as Output
 1d6:	84 b1       	in	r24, 0x04	; 4
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	84 b9       	out	0x04, r24	; 4

	OCR1A= 2000 + ((2000/180) * angle);  //90 degree
 1dc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e4:	4b e0       	ldi	r20, 0x0B	; 11
 1e6:	42 9f       	mul	r20, r18
 1e8:	c0 01       	movw	r24, r0
 1ea:	43 9f       	mul	r20, r19
 1ec:	90 0d       	add	r25, r0
 1ee:	11 24       	eor	r1, r1
 1f0:	80 53       	subi	r24, 0x30	; 48
 1f2:	98 4f       	sbci	r25, 0xF8	; 248
 1f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	setupADC();	
 1fc:	0e 94 4e 00 	call	0x9c	; 0x9c <setupADC>
	sei();
 200:	78 94       	sei
 202:	ff cf       	rjmp	.-2      	; 0x202 <main+0x50>

00000204 <__fixsfsi>:
 204:	0e 94 09 01 	call	0x212	; 0x212 <__fixunssfsi>
 208:	68 94       	set
 20a:	b1 11       	cpse	r27, r1
 20c:	0c 94 98 01 	jmp	0x330	; 0x330 <__fp_szero>
 210:	08 95       	ret

00000212 <__fixunssfsi>:
 212:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__fp_splitA>
 216:	88 f0       	brcs	.+34     	; 0x23a <__fixunssfsi+0x28>
 218:	9f 57       	subi	r25, 0x7F	; 127
 21a:	98 f0       	brcs	.+38     	; 0x242 <__fixunssfsi+0x30>
 21c:	b9 2f       	mov	r27, r25
 21e:	99 27       	eor	r25, r25
 220:	b7 51       	subi	r27, 0x17	; 23
 222:	b0 f0       	brcs	.+44     	; 0x250 <__fixunssfsi+0x3e>
 224:	e1 f0       	breq	.+56     	; 0x25e <__fixunssfsi+0x4c>
 226:	66 0f       	add	r22, r22
 228:	77 1f       	adc	r23, r23
 22a:	88 1f       	adc	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	1a f0       	brmi	.+6      	; 0x236 <__fixunssfsi+0x24>
 230:	ba 95       	dec	r27
 232:	c9 f7       	brne	.-14     	; 0x226 <__fixunssfsi+0x14>
 234:	14 c0       	rjmp	.+40     	; 0x25e <__fixunssfsi+0x4c>
 236:	b1 30       	cpi	r27, 0x01	; 1
 238:	91 f0       	breq	.+36     	; 0x25e <__fixunssfsi+0x4c>
 23a:	0e 94 97 01 	call	0x32e	; 0x32e <__fp_zero>
 23e:	b1 e0       	ldi	r27, 0x01	; 1
 240:	08 95       	ret
 242:	0c 94 97 01 	jmp	0x32e	; 0x32e <__fp_zero>
 246:	67 2f       	mov	r22, r23
 248:	78 2f       	mov	r23, r24
 24a:	88 27       	eor	r24, r24
 24c:	b8 5f       	subi	r27, 0xF8	; 248
 24e:	39 f0       	breq	.+14     	; 0x25e <__fixunssfsi+0x4c>
 250:	b9 3f       	cpi	r27, 0xF9	; 249
 252:	cc f3       	brlt	.-14     	; 0x246 <__fixunssfsi+0x34>
 254:	86 95       	lsr	r24
 256:	77 95       	ror	r23
 258:	67 95       	ror	r22
 25a:	b3 95       	inc	r27
 25c:	d9 f7       	brne	.-10     	; 0x254 <__fixunssfsi+0x42>
 25e:	3e f4       	brtc	.+14     	; 0x26e <__fixunssfsi+0x5c>
 260:	90 95       	com	r25
 262:	80 95       	com	r24
 264:	70 95       	com	r23
 266:	61 95       	neg	r22
 268:	7f 4f       	sbci	r23, 0xFF	; 255
 26a:	8f 4f       	sbci	r24, 0xFF	; 255
 26c:	9f 4f       	sbci	r25, 0xFF	; 255
 26e:	08 95       	ret

00000270 <__floatunsisf>:
 270:	e8 94       	clt
 272:	09 c0       	rjmp	.+18     	; 0x286 <__floatsisf+0x12>

00000274 <__floatsisf>:
 274:	97 fb       	bst	r25, 7
 276:	3e f4       	brtc	.+14     	; 0x286 <__floatsisf+0x12>
 278:	90 95       	com	r25
 27a:	80 95       	com	r24
 27c:	70 95       	com	r23
 27e:	61 95       	neg	r22
 280:	7f 4f       	sbci	r23, 0xFF	; 255
 282:	8f 4f       	sbci	r24, 0xFF	; 255
 284:	9f 4f       	sbci	r25, 0xFF	; 255
 286:	99 23       	and	r25, r25
 288:	a9 f0       	breq	.+42     	; 0x2b4 <__floatsisf+0x40>
 28a:	f9 2f       	mov	r31, r25
 28c:	96 e9       	ldi	r25, 0x96	; 150
 28e:	bb 27       	eor	r27, r27
 290:	93 95       	inc	r25
 292:	f6 95       	lsr	r31
 294:	87 95       	ror	r24
 296:	77 95       	ror	r23
 298:	67 95       	ror	r22
 29a:	b7 95       	ror	r27
 29c:	f1 11       	cpse	r31, r1
 29e:	f8 cf       	rjmp	.-16     	; 0x290 <__floatsisf+0x1c>
 2a0:	fa f4       	brpl	.+62     	; 0x2e0 <__floatsisf+0x6c>
 2a2:	bb 0f       	add	r27, r27
 2a4:	11 f4       	brne	.+4      	; 0x2aa <__floatsisf+0x36>
 2a6:	60 ff       	sbrs	r22, 0
 2a8:	1b c0       	rjmp	.+54     	; 0x2e0 <__floatsisf+0x6c>
 2aa:	6f 5f       	subi	r22, 0xFF	; 255
 2ac:	7f 4f       	sbci	r23, 0xFF	; 255
 2ae:	8f 4f       	sbci	r24, 0xFF	; 255
 2b0:	9f 4f       	sbci	r25, 0xFF	; 255
 2b2:	16 c0       	rjmp	.+44     	; 0x2e0 <__floatsisf+0x6c>
 2b4:	88 23       	and	r24, r24
 2b6:	11 f0       	breq	.+4      	; 0x2bc <__floatsisf+0x48>
 2b8:	96 e9       	ldi	r25, 0x96	; 150
 2ba:	11 c0       	rjmp	.+34     	; 0x2de <__floatsisf+0x6a>
 2bc:	77 23       	and	r23, r23
 2be:	21 f0       	breq	.+8      	; 0x2c8 <__floatsisf+0x54>
 2c0:	9e e8       	ldi	r25, 0x8E	; 142
 2c2:	87 2f       	mov	r24, r23
 2c4:	76 2f       	mov	r23, r22
 2c6:	05 c0       	rjmp	.+10     	; 0x2d2 <__floatsisf+0x5e>
 2c8:	66 23       	and	r22, r22
 2ca:	71 f0       	breq	.+28     	; 0x2e8 <__floatsisf+0x74>
 2cc:	96 e8       	ldi	r25, 0x86	; 134
 2ce:	86 2f       	mov	r24, r22
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	2a f0       	brmi	.+10     	; 0x2e0 <__floatsisf+0x6c>
 2d6:	9a 95       	dec	r25
 2d8:	66 0f       	add	r22, r22
 2da:	77 1f       	adc	r23, r23
 2dc:	88 1f       	adc	r24, r24
 2de:	da f7       	brpl	.-10     	; 0x2d6 <__floatsisf+0x62>
 2e0:	88 0f       	add	r24, r24
 2e2:	96 95       	lsr	r25
 2e4:	87 95       	ror	r24
 2e6:	97 f9       	bld	r25, 7
 2e8:	08 95       	ret

000002ea <__fp_split3>:
 2ea:	57 fd       	sbrc	r21, 7
 2ec:	90 58       	subi	r25, 0x80	; 128
 2ee:	44 0f       	add	r20, r20
 2f0:	55 1f       	adc	r21, r21
 2f2:	59 f0       	breq	.+22     	; 0x30a <__fp_splitA+0x10>
 2f4:	5f 3f       	cpi	r21, 0xFF	; 255
 2f6:	71 f0       	breq	.+28     	; 0x314 <__fp_splitA+0x1a>
 2f8:	47 95       	ror	r20

000002fa <__fp_splitA>:
 2fa:	88 0f       	add	r24, r24
 2fc:	97 fb       	bst	r25, 7
 2fe:	99 1f       	adc	r25, r25
 300:	61 f0       	breq	.+24     	; 0x31a <__fp_splitA+0x20>
 302:	9f 3f       	cpi	r25, 0xFF	; 255
 304:	79 f0       	breq	.+30     	; 0x324 <__fp_splitA+0x2a>
 306:	87 95       	ror	r24
 308:	08 95       	ret
 30a:	12 16       	cp	r1, r18
 30c:	13 06       	cpc	r1, r19
 30e:	14 06       	cpc	r1, r20
 310:	55 1f       	adc	r21, r21
 312:	f2 cf       	rjmp	.-28     	; 0x2f8 <__fp_split3+0xe>
 314:	46 95       	lsr	r20
 316:	f1 df       	rcall	.-30     	; 0x2fa <__fp_splitA>
 318:	08 c0       	rjmp	.+16     	; 0x32a <__fp_splitA+0x30>
 31a:	16 16       	cp	r1, r22
 31c:	17 06       	cpc	r1, r23
 31e:	18 06       	cpc	r1, r24
 320:	99 1f       	adc	r25, r25
 322:	f1 cf       	rjmp	.-30     	; 0x306 <__fp_splitA+0xc>
 324:	86 95       	lsr	r24
 326:	71 05       	cpc	r23, r1
 328:	61 05       	cpc	r22, r1
 32a:	08 94       	sec
 32c:	08 95       	ret

0000032e <__fp_zero>:
 32e:	e8 94       	clt

00000330 <__fp_szero>:
 330:	bb 27       	eor	r27, r27
 332:	66 27       	eor	r22, r22
 334:	77 27       	eor	r23, r23
 336:	cb 01       	movw	r24, r22
 338:	97 f9       	bld	r25, 7
 33a:	08 95       	ret

0000033c <__mulsf3>:
 33c:	0e 94 b1 01 	call	0x362	; 0x362 <__mulsf3x>
 340:	0c 94 22 02 	jmp	0x444	; 0x444 <__fp_round>
 344:	0e 94 14 02 	call	0x428	; 0x428 <__fp_pscA>
 348:	38 f0       	brcs	.+14     	; 0x358 <__mulsf3+0x1c>
 34a:	0e 94 1b 02 	call	0x436	; 0x436 <__fp_pscB>
 34e:	20 f0       	brcs	.+8      	; 0x358 <__mulsf3+0x1c>
 350:	95 23       	and	r25, r21
 352:	11 f0       	breq	.+4      	; 0x358 <__mulsf3+0x1c>
 354:	0c 94 0b 02 	jmp	0x416	; 0x416 <__fp_inf>
 358:	0c 94 11 02 	jmp	0x422	; 0x422 <__fp_nan>
 35c:	11 24       	eor	r1, r1
 35e:	0c 94 98 01 	jmp	0x330	; 0x330 <__fp_szero>

00000362 <__mulsf3x>:
 362:	0e 94 75 01 	call	0x2ea	; 0x2ea <__fp_split3>
 366:	70 f3       	brcs	.-36     	; 0x344 <__mulsf3+0x8>

00000368 <__mulsf3_pse>:
 368:	95 9f       	mul	r25, r21
 36a:	c1 f3       	breq	.-16     	; 0x35c <__mulsf3+0x20>
 36c:	95 0f       	add	r25, r21
 36e:	50 e0       	ldi	r21, 0x00	; 0
 370:	55 1f       	adc	r21, r21
 372:	62 9f       	mul	r22, r18
 374:	f0 01       	movw	r30, r0
 376:	72 9f       	mul	r23, r18
 378:	bb 27       	eor	r27, r27
 37a:	f0 0d       	add	r31, r0
 37c:	b1 1d       	adc	r27, r1
 37e:	63 9f       	mul	r22, r19
 380:	aa 27       	eor	r26, r26
 382:	f0 0d       	add	r31, r0
 384:	b1 1d       	adc	r27, r1
 386:	aa 1f       	adc	r26, r26
 388:	64 9f       	mul	r22, r20
 38a:	66 27       	eor	r22, r22
 38c:	b0 0d       	add	r27, r0
 38e:	a1 1d       	adc	r26, r1
 390:	66 1f       	adc	r22, r22
 392:	82 9f       	mul	r24, r18
 394:	22 27       	eor	r18, r18
 396:	b0 0d       	add	r27, r0
 398:	a1 1d       	adc	r26, r1
 39a:	62 1f       	adc	r22, r18
 39c:	73 9f       	mul	r23, r19
 39e:	b0 0d       	add	r27, r0
 3a0:	a1 1d       	adc	r26, r1
 3a2:	62 1f       	adc	r22, r18
 3a4:	83 9f       	mul	r24, r19
 3a6:	a0 0d       	add	r26, r0
 3a8:	61 1d       	adc	r22, r1
 3aa:	22 1f       	adc	r18, r18
 3ac:	74 9f       	mul	r23, r20
 3ae:	33 27       	eor	r19, r19
 3b0:	a0 0d       	add	r26, r0
 3b2:	61 1d       	adc	r22, r1
 3b4:	23 1f       	adc	r18, r19
 3b6:	84 9f       	mul	r24, r20
 3b8:	60 0d       	add	r22, r0
 3ba:	21 1d       	adc	r18, r1
 3bc:	82 2f       	mov	r24, r18
 3be:	76 2f       	mov	r23, r22
 3c0:	6a 2f       	mov	r22, r26
 3c2:	11 24       	eor	r1, r1
 3c4:	9f 57       	subi	r25, 0x7F	; 127
 3c6:	50 40       	sbci	r21, 0x00	; 0
 3c8:	9a f0       	brmi	.+38     	; 0x3f0 <__mulsf3_pse+0x88>
 3ca:	f1 f0       	breq	.+60     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3cc:	88 23       	and	r24, r24
 3ce:	4a f0       	brmi	.+18     	; 0x3e2 <__mulsf3_pse+0x7a>
 3d0:	ee 0f       	add	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	bb 1f       	adc	r27, r27
 3d6:	66 1f       	adc	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	88 1f       	adc	r24, r24
 3dc:	91 50       	subi	r25, 0x01	; 1
 3de:	50 40       	sbci	r21, 0x00	; 0
 3e0:	a9 f7       	brne	.-22     	; 0x3cc <__mulsf3_pse+0x64>
 3e2:	9e 3f       	cpi	r25, 0xFE	; 254
 3e4:	51 05       	cpc	r21, r1
 3e6:	80 f0       	brcs	.+32     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3e8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__fp_inf>
 3ec:	0c 94 98 01 	jmp	0x330	; 0x330 <__fp_szero>
 3f0:	5f 3f       	cpi	r21, 0xFF	; 255
 3f2:	e4 f3       	brlt	.-8      	; 0x3ec <__mulsf3_pse+0x84>
 3f4:	98 3e       	cpi	r25, 0xE8	; 232
 3f6:	d4 f3       	brlt	.-12     	; 0x3ec <__mulsf3_pse+0x84>
 3f8:	86 95       	lsr	r24
 3fa:	77 95       	ror	r23
 3fc:	67 95       	ror	r22
 3fe:	b7 95       	ror	r27
 400:	f7 95       	ror	r31
 402:	e7 95       	ror	r30
 404:	9f 5f       	subi	r25, 0xFF	; 255
 406:	c1 f7       	brne	.-16     	; 0x3f8 <__mulsf3_pse+0x90>
 408:	fe 2b       	or	r31, r30
 40a:	88 0f       	add	r24, r24
 40c:	91 1d       	adc	r25, r1
 40e:	96 95       	lsr	r25
 410:	87 95       	ror	r24
 412:	97 f9       	bld	r25, 7
 414:	08 95       	ret

00000416 <__fp_inf>:
 416:	97 f9       	bld	r25, 7
 418:	9f 67       	ori	r25, 0x7F	; 127
 41a:	80 e8       	ldi	r24, 0x80	; 128
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	08 95       	ret

00000422 <__fp_nan>:
 422:	9f ef       	ldi	r25, 0xFF	; 255
 424:	80 ec       	ldi	r24, 0xC0	; 192
 426:	08 95       	ret

00000428 <__fp_pscA>:
 428:	00 24       	eor	r0, r0
 42a:	0a 94       	dec	r0
 42c:	16 16       	cp	r1, r22
 42e:	17 06       	cpc	r1, r23
 430:	18 06       	cpc	r1, r24
 432:	09 06       	cpc	r0, r25
 434:	08 95       	ret

00000436 <__fp_pscB>:
 436:	00 24       	eor	r0, r0
 438:	0a 94       	dec	r0
 43a:	12 16       	cp	r1, r18
 43c:	13 06       	cpc	r1, r19
 43e:	14 06       	cpc	r1, r20
 440:	05 06       	cpc	r0, r21
 442:	08 95       	ret

00000444 <__fp_round>:
 444:	09 2e       	mov	r0, r25
 446:	03 94       	inc	r0
 448:	00 0c       	add	r0, r0
 44a:	11 f4       	brne	.+4      	; 0x450 <__fp_round+0xc>
 44c:	88 23       	and	r24, r24
 44e:	52 f0       	brmi	.+20     	; 0x464 <__fp_round+0x20>
 450:	bb 0f       	add	r27, r27
 452:	40 f4       	brcc	.+16     	; 0x464 <__fp_round+0x20>
 454:	bf 2b       	or	r27, r31
 456:	11 f4       	brne	.+4      	; 0x45c <__fp_round+0x18>
 458:	60 ff       	sbrs	r22, 0
 45a:	04 c0       	rjmp	.+8      	; 0x464 <__fp_round+0x20>
 45c:	6f 5f       	subi	r22, 0xFF	; 255
 45e:	7f 4f       	sbci	r23, 0xFF	; 255
 460:	8f 4f       	sbci	r24, 0xFF	; 255
 462:	9f 4f       	sbci	r25, 0xFF	; 255
 464:	08 95       	ret

00000466 <_exit>:
 466:	f8 94       	cli

00000468 <__stop_program>:
 468:	ff cf       	rjmp	.-2      	; 0x468 <__stop_program>
