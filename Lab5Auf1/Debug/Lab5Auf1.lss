
Lab5Auf1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000062e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000062e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001414  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a5  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a12  00000000  00000000  00002399  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  00002dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f2  00000000  00000000  000030c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000907  00000000  00000000  000036b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00003fb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b3 02 	call	0x566	; 0x566 <main>
  88:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <TWIInit>:
uint8_t DS3231GetTenYear(void) {
	uint8_t u8data;	
	u8data = DS3231ReadDataFrom(0x06);
	u8data = (u8data >> 4);
	return u8data;
  90:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  94:	88 e4       	ldi	r24, 0x48	; 72
  96:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  9a:	84 e0       	ldi	r24, 0x04	; 4
  9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a0:	08 95       	ret

000000a2 <TWIStart>:
  a2:	84 ea       	ldi	r24, 0xA4	; 164
  a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ac:	88 23       	and	r24, r24
  ae:	e4 f7       	brge	.-8      	; 0xa8 <TWIStart+0x6>
  b0:	08 95       	ret

000000b2 <TWIStop>:
  b2:	84 e9       	ldi	r24, 0x94	; 148
  b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  bc:	84 fd       	sbrc	r24, 4
  be:	fc cf       	rjmp	.-8      	; 0xb8 <TWIStop+0x6>
  c0:	08 95       	ret

000000c2 <TWIWrite>:
  c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  c6:	84 e8       	ldi	r24, 0x84	; 132
  c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  d0:	88 23       	and	r24, r24
  d2:	e4 f7       	brge	.-8      	; 0xcc <TWIWrite+0xa>
  d4:	08 95       	ret

000000d6 <TWIReadNACK>:
  d6:	84 e8       	ldi	r24, 0x84	; 132
  d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  dc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  e0:	88 23       	and	r24, r24
  e2:	e4 f7       	brge	.-8      	; 0xdc <TWIReadNACK+0x6>
  e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  e8:	08 95       	ret

000000ea <TWIGetStatus>:
  ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ee:	88 7f       	andi	r24, 0xF8	; 248
  f0:	08 95       	ret

000000f2 <TWIError>:
  f2:	0e 94 59 00 	call	0xb2	; 0xb2 <TWIStop>
  f6:	08 95       	ret

000000f8 <decimal_to_bcd>:
  f8:	9d ec       	ldi	r25, 0xCD	; 205
  fa:	89 9f       	mul	r24, r25
  fc:	91 2d       	mov	r25, r1
  fe:	11 24       	eor	r1, r1
 100:	96 95       	lsr	r25
 102:	96 95       	lsr	r25
 104:	96 95       	lsr	r25
 106:	39 2f       	mov	r19, r25
 108:	33 0f       	add	r19, r19
 10a:	23 2f       	mov	r18, r19
 10c:	22 0f       	add	r18, r18
 10e:	22 0f       	add	r18, r18
 110:	23 0f       	add	r18, r19
 112:	82 1b       	sub	r24, r18
 114:	20 e1       	ldi	r18, 0x10	; 16
 116:	92 9f       	mul	r25, r18
 118:	80 0d       	add	r24, r0
 11a:	11 24       	eor	r1, r1
 11c:	08 95       	ret

0000011e <DS3231StartOsc>:
 11e:	0e 94 51 00 	call	0xa2	; 0xa2 <TWIStart>
 122:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 126:	88 30       	cpi	r24, 0x08	; 8
 128:	11 f0       	breq	.+4      	; 0x12e <DS3231StartOsc+0x10>
 12a:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 12e:	80 ed       	ldi	r24, 0xD0	; 208
 130:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 134:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 138:	88 31       	cpi	r24, 0x18	; 24
 13a:	11 f0       	breq	.+4      	; 0x140 <DS3231StartOsc+0x22>
 13c:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 140:	8e e0       	ldi	r24, 0x0E	; 14
 142:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 146:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 14a:	88 32       	cpi	r24, 0x28	; 40
 14c:	11 f0       	breq	.+4      	; 0x152 <DS3231StartOsc+0x34>
 14e:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 158:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 15c:	88 32       	cpi	r24, 0x28	; 40
 15e:	11 f0       	breq	.+4      	; 0x164 <DS3231StartOsc+0x46>
 160:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 164:	0e 94 59 00 	call	0xb2	; 0xb2 <TWIStop>
 168:	08 95       	ret

0000016a <DS3231SetTimeAndDate>:
 16a:	9f 92       	push	r9
 16c:	af 92       	push	r10
 16e:	bf 92       	push	r11
 170:	cf 92       	push	r12
 172:	df 92       	push	r13
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	27 97       	sbiw	r28, 0x07	; 7
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
 190:	18 2f       	mov	r17, r24
 192:	b6 2e       	mov	r11, r22
 194:	84 2f       	mov	r24, r20
 196:	f2 2e       	mov	r15, r18
 198:	90 ed       	ldi	r25, 0xD0	; 208
 19a:	c9 1a       	sub	r12, r25
 19c:	97 e0       	ldi	r25, 0x07	; 7
 19e:	d9 0a       	sbc	r13, r25
 1a0:	0e 94 7c 00 	call	0xf8	; 0xf8 <decimal_to_bcd>
 1a4:	98 2e       	mov	r9, r24
 1a6:	8b 2d       	mov	r24, r11
 1a8:	0e 94 7c 00 	call	0xf8	; 0xf8 <decimal_to_bcd>
 1ac:	a8 2e       	mov	r10, r24
 1ae:	81 2f       	mov	r24, r17
 1b0:	0e 94 7c 00 	call	0xf8	; 0xf8 <decimal_to_bcd>
 1b4:	b8 2e       	mov	r11, r24
 1b6:	80 2f       	mov	r24, r16
 1b8:	0e 94 7c 00 	call	0xf8	; 0xf8 <decimal_to_bcd>
 1bc:	d8 2e       	mov	r13, r24
 1be:	8e 2d       	mov	r24, r14
 1c0:	0e 94 7c 00 	call	0xf8	; 0xf8 <decimal_to_bcd>
 1c4:	18 2f       	mov	r17, r24
 1c6:	8c 2d       	mov	r24, r12
 1c8:	0e 94 7c 00 	call	0xf8	; 0xf8 <decimal_to_bcd>
 1cc:	99 82       	std	Y+1, r9	; 0x01
 1ce:	aa 82       	std	Y+2, r10	; 0x02
 1d0:	bb 82       	std	Y+3, r11	; 0x03
 1d2:	fc 82       	std	Y+4, r15	; 0x04
 1d4:	dd 82       	std	Y+5, r13	; 0x05
 1d6:	1e 83       	std	Y+6, r17	; 0x06
 1d8:	8f 83       	std	Y+7, r24	; 0x07
 1da:	0e 94 51 00 	call	0xa2	; 0xa2 <TWIStart>
 1de:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 1e2:	88 30       	cpi	r24, 0x08	; 8
 1e4:	11 f0       	breq	.+4      	; 0x1ea <DS3231SetTimeAndDate+0x80>
 1e6:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 1ea:	80 ed       	ldi	r24, 0xD0	; 208
 1ec:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 1f0:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 1f4:	88 31       	cpi	r24, 0x18	; 24
 1f6:	11 f0       	breq	.+4      	; 0x1fc <DS3231SetTimeAndDate+0x92>
 1f8:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 202:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 206:	88 32       	cpi	r24, 0x28	; 40
 208:	11 f0       	breq	.+4      	; 0x20e <DS3231SetTimeAndDate+0xa4>
 20a:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 20e:	10 e0       	ldi	r17, 0x00	; 0
 210:	10 c0       	rjmp	.+32     	; 0x232 <DS3231SetTimeAndDate+0xc8>
 212:	e1 e0       	ldi	r30, 0x01	; 1
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	ec 0f       	add	r30, r28
 218:	fd 1f       	adc	r31, r29
 21a:	e1 0f       	add	r30, r17
 21c:	f1 1d       	adc	r31, r1
 21e:	80 81       	ld	r24, Z
 220:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 224:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 228:	88 32       	cpi	r24, 0x28	; 40
 22a:	11 f0       	breq	.+4      	; 0x230 <DS3231SetTimeAndDate+0xc6>
 22c:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 230:	1f 5f       	subi	r17, 0xFF	; 255
 232:	18 30       	cpi	r17, 0x08	; 8
 234:	70 f3       	brcs	.-36     	; 0x212 <DS3231SetTimeAndDate+0xa8>
 236:	0e 94 59 00 	call	0xb2	; 0xb2 <TWIStop>
 23a:	27 96       	adiw	r28, 0x07	; 7
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	ff 90       	pop	r15
 250:	ef 90       	pop	r14
 252:	df 90       	pop	r13
 254:	cf 90       	pop	r12
 256:	bf 90       	pop	r11
 258:	af 90       	pop	r10
 25a:	9f 90       	pop	r9
 25c:	08 95       	ret

0000025e <DS3231ReadDataFrom>:
 25e:	cf 93       	push	r28
 260:	c8 2f       	mov	r28, r24
 262:	0e 94 51 00 	call	0xa2	; 0xa2 <TWIStart>
 266:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 26a:	88 30       	cpi	r24, 0x08	; 8
 26c:	11 f0       	breq	.+4      	; 0x272 <DS3231ReadDataFrom+0x14>
 26e:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 272:	80 ed       	ldi	r24, 0xD0	; 208
 274:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 278:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 27c:	88 31       	cpi	r24, 0x18	; 24
 27e:	11 f0       	breq	.+4      	; 0x284 <DS3231ReadDataFrom+0x26>
 280:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 284:	8c 2f       	mov	r24, r28
 286:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 28a:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 28e:	88 32       	cpi	r24, 0x28	; 40
 290:	11 f0       	breq	.+4      	; 0x296 <DS3231ReadDataFrom+0x38>
 292:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 296:	0e 94 51 00 	call	0xa2	; 0xa2 <TWIStart>
 29a:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 29e:	80 31       	cpi	r24, 0x10	; 16
 2a0:	11 f0       	breq	.+4      	; 0x2a6 <DS3231ReadDataFrom+0x48>
 2a2:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 2a6:	81 ed       	ldi	r24, 0xD1	; 209
 2a8:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 2ac:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 2b0:	80 34       	cpi	r24, 0x40	; 64
 2b2:	11 f0       	breq	.+4      	; 0x2b8 <DS3231ReadDataFrom+0x5a>
 2b4:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 2b8:	0e 94 6b 00 	call	0xd6	; 0xd6 <TWIReadNACK>
 2bc:	c8 2f       	mov	r28, r24
 2be:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 2c2:	88 35       	cpi	r24, 0x58	; 88
 2c4:	11 f0       	breq	.+4      	; 0x2ca <DS3231ReadDataFrom+0x6c>
 2c6:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 2ca:	0e 94 59 00 	call	0xb2	; 0xb2 <TWIStop>
 2ce:	8c 2f       	mov	r24, r28
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <DS3231WriteDataTo>:
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	d8 2f       	mov	r29, r24
 2da:	c6 2f       	mov	r28, r22
 2dc:	0e 94 51 00 	call	0xa2	; 0xa2 <TWIStart>
 2e0:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 2e4:	88 30       	cpi	r24, 0x08	; 8
 2e6:	11 f0       	breq	.+4      	; 0x2ec <DS3231WriteDataTo+0x18>
 2e8:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 2ec:	80 ed       	ldi	r24, 0xD0	; 208
 2ee:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 2f2:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 2f6:	88 31       	cpi	r24, 0x18	; 24
 2f8:	11 f0       	breq	.+4      	; 0x2fe <DS3231WriteDataTo+0x2a>
 2fa:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 2fe:	8d 2f       	mov	r24, r29
 300:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 304:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 308:	88 32       	cpi	r24, 0x28	; 40
 30a:	11 f0       	breq	.+4      	; 0x310 <DS3231WriteDataTo+0x3c>
 30c:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 310:	8c 2f       	mov	r24, r28
 312:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 316:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 31a:	88 32       	cpi	r24, 0x28	; 40
 31c:	11 f0       	breq	.+4      	; 0x322 <DS3231WriteDataTo+0x4e>
 31e:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 322:	0e 94 59 00 	call	0xb2	; 0xb2 <TWIStop>
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <EnableIntSqwt>:
 32c:	8e e0       	ldi	r24, 0x0E	; 14
 32e:	0e 94 2f 01 	call	0x25e	; 0x25e <DS3231ReadDataFrom>
 332:	68 2f       	mov	r22, r24
 334:	64 60       	ori	r22, 0x04	; 4
 336:	8e e0       	ldi	r24, 0x0E	; 14
 338:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DS3231WriteDataTo>
 33c:	08 95       	ret

0000033e <getBitFromRegister>:
 33e:	61 11       	cpse	r22, r1
 340:	02 c0       	rjmp	.+4      	; 0x346 <getBitFromRegister+0x8>
 342:	81 70       	andi	r24, 0x01	; 1
 344:	08 95       	ret
 346:	61 30       	cpi	r22, 0x01	; 1
 348:	29 f4       	brne	.+10     	; 0x354 <getBitFromRegister+0x16>
 34a:	82 70       	andi	r24, 0x02	; 2
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	95 95       	asr	r25
 350:	87 95       	ror	r24
 352:	08 95       	ret
 354:	62 30       	cpi	r22, 0x02	; 2
 356:	39 f4       	brne	.+14     	; 0x366 <getBitFromRegister+0x28>
 358:	84 70       	andi	r24, 0x04	; 4
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	95 95       	asr	r25
 35e:	87 95       	ror	r24
 360:	95 95       	asr	r25
 362:	87 95       	ror	r24
 364:	08 95       	ret
 366:	63 30       	cpi	r22, 0x03	; 3
 368:	49 f4       	brne	.+18     	; 0x37c <getBitFromRegister+0x3e>
 36a:	88 70       	andi	r24, 0x08	; 8
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	95 95       	asr	r25
 370:	87 95       	ror	r24
 372:	95 95       	asr	r25
 374:	87 95       	ror	r24
 376:	95 95       	asr	r25
 378:	87 95       	ror	r24
 37a:	08 95       	ret
 37c:	64 30       	cpi	r22, 0x04	; 4
 37e:	49 f4       	brne	.+18     	; 0x392 <getBitFromRegister+0x54>
 380:	80 71       	andi	r24, 0x10	; 16
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	95 95       	asr	r25
 386:	87 95       	ror	r24
 388:	95 95       	asr	r25
 38a:	87 95       	ror	r24
 38c:	95 95       	asr	r25
 38e:	87 95       	ror	r24
 390:	08 95       	ret
 392:	65 30       	cpi	r22, 0x05	; 5
 394:	59 f4       	brne	.+22     	; 0x3ac <getBitFromRegister+0x6e>
 396:	80 72       	andi	r24, 0x20	; 32
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	95 95       	asr	r25
 39c:	87 95       	ror	r24
 39e:	95 95       	asr	r25
 3a0:	87 95       	ror	r24
 3a2:	95 95       	asr	r25
 3a4:	87 95       	ror	r24
 3a6:	95 95       	asr	r25
 3a8:	87 95       	ror	r24
 3aa:	08 95       	ret
 3ac:	66 30       	cpi	r22, 0x06	; 6
 3ae:	69 f4       	brne	.+26     	; 0x3ca <getBitFromRegister+0x8c>
 3b0:	80 74       	andi	r24, 0x40	; 64
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	95 95       	asr	r25
 3b6:	87 95       	ror	r24
 3b8:	95 95       	asr	r25
 3ba:	87 95       	ror	r24
 3bc:	95 95       	asr	r25
 3be:	87 95       	ror	r24
 3c0:	95 95       	asr	r25
 3c2:	87 95       	ror	r24
 3c4:	95 95       	asr	r25
 3c6:	87 95       	ror	r24
 3c8:	08 95       	ret
 3ca:	67 30       	cpi	r22, 0x07	; 7
 3cc:	59 f4       	brne	.+22     	; 0x3e4 <getBitFromRegister+0xa6>
 3ce:	80 78       	andi	r24, 0x80	; 128
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	08 2e       	mov	r0, r24
 3d4:	89 2f       	mov	r24, r25
 3d6:	00 0c       	add	r0, r0
 3d8:	88 1f       	adc	r24, r24
 3da:	99 0b       	sbc	r25, r25
 3dc:	00 0c       	add	r0, r0
 3de:	88 1f       	adc	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	08 95       	ret
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	08 95       	ret

000003e8 <SetAlarm1Rate>:
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	c8 2f       	mov	r28, r24
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	0e 94 9f 01 	call	0x33e	; 0x33e <getBitFromRegister>
 3f8:	08 2f       	mov	r16, r24
 3fa:	07 95       	ror	r16
 3fc:	00 27       	eor	r16, r16
 3fe:	07 95       	ror	r16
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	8c 2f       	mov	r24, r28
 404:	0e 94 9f 01 	call	0x33e	; 0x33e <getBitFromRegister>
 408:	18 2f       	mov	r17, r24
 40a:	17 95       	ror	r17
 40c:	11 27       	eor	r17, r17
 40e:	17 95       	ror	r17
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	8c 2f       	mov	r24, r28
 414:	0e 94 9f 01 	call	0x33e	; 0x33e <getBitFromRegister>
 418:	d8 2f       	mov	r29, r24
 41a:	d7 95       	ror	r29
 41c:	dd 27       	eor	r29, r29
 41e:	d7 95       	ror	r29
 420:	63 e0       	ldi	r22, 0x03	; 3
 422:	8c 2f       	mov	r24, r28
 424:	0e 94 9f 01 	call	0x33e	; 0x33e <getBitFromRegister>
 428:	c8 2f       	mov	r28, r24
 42a:	c7 95       	ror	r28
 42c:	cc 27       	eor	r28, r28
 42e:	c7 95       	ror	r28
 430:	0e 94 51 00 	call	0xa2	; 0xa2 <TWIStart>
 434:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 438:	88 30       	cpi	r24, 0x08	; 8
 43a:	11 f0       	breq	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 440:	80 ed       	ldi	r24, 0xD0	; 208
 442:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 446:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 44a:	88 31       	cpi	r24, 0x18	; 24
 44c:	11 f0       	breq	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 452:	87 e0       	ldi	r24, 0x07	; 7
 454:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 458:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 45c:	88 32       	cpi	r24, 0x28	; 40
 45e:	11 f0       	breq	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 460:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 464:	80 2f       	mov	r24, r16
 466:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 46a:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 46e:	88 32       	cpi	r24, 0x28	; 40
 470:	11 f0       	breq	.+4      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 472:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 476:	81 2f       	mov	r24, r17
 478:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 47c:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 480:	88 32       	cpi	r24, 0x28	; 40
 482:	11 f0       	breq	.+4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 484:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 488:	8d 2f       	mov	r24, r29
 48a:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 48e:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 492:	88 32       	cpi	r24, 0x28	; 40
 494:	11 f0       	breq	.+4      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 496:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 49a:	8c 2f       	mov	r24, r28
 49c:	0e 94 61 00 	call	0xc2	; 0xc2 <TWIWrite>
 4a0:	0e 94 75 00 	call	0xea	; 0xea <TWIGetStatus>
 4a4:	88 32       	cpi	r24, 0x28	; 40
 4a6:	11 f0       	breq	.+4      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4a8:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIError>
 4ac:	0e 94 59 00 	call	0xb2	; 0xb2 <TWIStop>
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	08 95       	ret

000004ba <EnableAlarm1>:
 4ba:	8e e0       	ldi	r24, 0x0E	; 14
 4bc:	0e 94 2f 01 	call	0x25e	; 0x25e <DS3231ReadDataFrom>
 4c0:	68 2f       	mov	r22, r24
 4c2:	61 60       	ori	r22, 0x01	; 1
 4c4:	8e e0       	ldi	r24, 0x0E	; 14
 4c6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DS3231WriteDataTo>
 4ca:	08 95       	ret

000004cc <ResetAlarm1>:
 4cc:	8f e0       	ldi	r24, 0x0F	; 15
 4ce:	0e 94 2f 01 	call	0x25e	; 0x25e <DS3231ReadDataFrom>
 4d2:	68 2f       	mov	r22, r24
 4d4:	6e 7f       	andi	r22, 0xFE	; 254
 4d6:	8f e0       	ldi	r24, 0x0F	; 15
 4d8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DS3231WriteDataTo>
 4dc:	08 95       	ret

000004de <__vector_1>:
#include "TWIPrimitives.c"
#include "DS3231.c"

int zeahler = 0;

ISR(INT0_vect){
 4de:	1f 92       	push	r1
 4e0:	0f 92       	push	r0
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	0f 92       	push	r0
 4e6:	11 24       	eor	r1, r1
 4e8:	2f 93       	push	r18
 4ea:	3f 93       	push	r19
 4ec:	4f 93       	push	r20
 4ee:	5f 93       	push	r21
 4f0:	6f 93       	push	r22
 4f2:	7f 93       	push	r23
 4f4:	8f 93       	push	r24
 4f6:	9f 93       	push	r25
 4f8:	af 93       	push	r26
 4fa:	bf 93       	push	r27
 4fc:	ef 93       	push	r30
 4fe:	ff 93       	push	r31
	//zeahler bis 60
	if(zeahler == 60){
 500:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 504:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 508:	8c 33       	cpi	r24, 0x3C	; 60
 50a:	91 05       	cpc	r25, r1
 50c:	29 f4       	brne	.+10     	; 0x518 <__vector_1+0x3a>
		zeahler = 0; //setzt den zeahler zurueck
 50e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 512:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 516:	05 c0       	rjmp	.+10     	; 0x522 <__vector_1+0x44>
	}else{
		zeahler += 1; //erhoht den zeahler um 1
 518:	01 96       	adiw	r24, 0x01	; 1
 51a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 51e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}

	PORTC &= ~(1<<0); //setzt PORTC zurueck
 522:	88 b1       	in	r24, 0x08	; 8
 524:	8e 7f       	andi	r24, 0xFE	; 254
 526:	88 b9       	out	0x08, r24	; 8
	PORTC |= (zeahler & 0x20)>>5; //setzt das 6.bit in PORTC
 528:	28 b1       	in	r18, 0x08	; 8
 52a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 52e:	95 fb       	bst	r25, 5
 530:	88 27       	eor	r24, r24
 532:	80 f9       	bld	r24, 0
 534:	82 2b       	or	r24, r18
 536:	88 b9       	out	0x08, r24	; 8
	PORTB = (zeahler & 0x1F); //setzt die Restlichen bits in PORTB
 538:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 53c:	8f 71       	andi	r24, 0x1F	; 31
 53e:	85 b9       	out	0x05, r24	; 5
	ResetAlarm1(); //setzt das interrupt in der RTC zurueck
 540:	0e 94 66 02 	call	0x4cc	; 0x4cc <ResetAlarm1>
}
 544:	ff 91       	pop	r31
 546:	ef 91       	pop	r30
 548:	bf 91       	pop	r27
 54a:	af 91       	pop	r26
 54c:	9f 91       	pop	r25
 54e:	8f 91       	pop	r24
 550:	7f 91       	pop	r23
 552:	6f 91       	pop	r22
 554:	5f 91       	pop	r21
 556:	4f 91       	pop	r20
 558:	3f 91       	pop	r19
 55a:	2f 91       	pop	r18
 55c:	0f 90       	pop	r0
 55e:	0f be       	out	0x3f, r0	; 63
 560:	0f 90       	pop	r0
 562:	1f 90       	pop	r1
 564:	18 95       	reti

00000566 <main>:

int main(void){
	DDRD = 0x00; // Port als Input
 566:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0xFF; // Port als Ausgang
 568:	8f ef       	ldi	r24, 0xFF	; 255
 56a:	84 b9       	out	0x04, r24	; 4
	DDRC = 1<<0; //Port als Ausgang
 56c:	c1 e0       	ldi	r28, 0x01	; 1
 56e:	c7 b9       	out	0x07, r28	; 7

	TWIInit(); //TWI-Bus init.
 570:	0e 94 48 00 	call	0x90	; 0x90 <TWIInit>
    DS3231StartOsc(); // aktivieren der RTC clock
 574:	0e 94 8f 00 	call	0x11e	; 0x11e <DS3231StartOsc>
	uint8_t h = 12;
	uint8_t date = 1; // SUNDAY
	uint8_t month = 6; //JUNE
	uint8_t year = 21;
	uint8_t dayOfWeek = 7;
	DS3231SetTimeAndDate(h, m, s, dayOfWeek, date, month, year); //setzen der Zeit in der RTC
 578:	0f 2e       	mov	r0, r31
 57a:	f5 e1       	ldi	r31, 0x15	; 21
 57c:	cf 2e       	mov	r12, r31
 57e:	d1 2c       	mov	r13, r1
 580:	f0 2d       	mov	r31, r0
 582:	0f 2e       	mov	r0, r31
 584:	f6 e0       	ldi	r31, 0x06	; 6
 586:	ef 2e       	mov	r14, r31
 588:	f0 2d       	mov	r31, r0
 58a:	01 e0       	ldi	r16, 0x01	; 1
 58c:	27 e0       	ldi	r18, 0x07	; 7
 58e:	4c e0       	ldi	r20, 0x0C	; 12
 590:	6c e0       	ldi	r22, 0x0C	; 12
 592:	8c e0       	ldi	r24, 0x0C	; 12
 594:	0e 94 b5 00 	call	0x16a	; 0x16a <DS3231SetTimeAndDate>
	SetAlarm1Rate(0x0F); //alarmrate auf sekuendlich setzen
 598:	8f e0       	ldi	r24, 0x0F	; 15
 59a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <SetAlarm1Rate>
	EnableAlarm1(); // Alarm 1 Interrupt aktivieren
 59e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <EnableAlarm1>
	EnableIntSqwt(); // Interrupts auf den Ausgang belegen
 5a2:	0e 94 96 01 	call	0x32c	; 0x32c <EnableIntSqwt>

	PORTD = 1<<2; // Pullup at Interruptpin
 5a6:	84 e0       	ldi	r24, 0x04	; 4
 5a8:	8b b9       	out	0x0b, r24	; 11
	EICRA = 1<<1; // INT0 at Falling edge
 5aa:	82 e0       	ldi	r24, 0x02	; 2
 5ac:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 1<<0; //enable interrupt mask
 5b0:	cd bb       	out	0x1d, r28	; 29
	sei(); // global Interrupts einschalten
 5b2:	78 94       	sei
 5b4:	ff cf       	rjmp	.-2      	; 0x5b4 <main+0x4e>

000005b6 <_exit>:
 5b6:	f8 94       	cli

000005b8 <__stop_program>:
 5b8:	ff cf       	rjmp	.-2      	; 0x5b8 <__stop_program>
