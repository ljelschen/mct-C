
Lab4Auf1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007da  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070f  00000000  00000000  00000be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ce  00000000  00000000  000012f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000015c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003de  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005f  00000000  00000000  000019f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  78:	0c 94 84 01 	jmp	0x308	; 0x308 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_Read>:

/* ADC Einzelmessung */
uint16_t ADC_Read( uint8_t channel )
{
  // Kanal waehlen, ohne andere Bits zu beeinflu�en
  ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	90 81       	ld	r25, Z
  86:	90 7e       	andi	r25, 0xE0	; 224
  88:	8f 71       	andi	r24, 0x1F	; 31
  8a:	89 2b       	or	r24, r25
  8c:	80 83       	st	Z, r24
  ADCSRA |= (1<<ADSC);            // eine Wandlung "single conversion"
  8e:	ea e7       	ldi	r30, 0x7A	; 122
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	80 64       	ori	r24, 0x40	; 64
  96:	80 83       	st	Z, r24
  while (ADCSRA & (1<<ADSC) ) {   // auf Abschluss der Konvertierung warten
  98:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9c:	86 fd       	sbrc	r24, 6
  9e:	fc cf       	rjmp	.-8      	; 0x98 <ADC_Read+0x18>
  }
  return ADCW;                    // ADC auslesen und zur�ckgeben
  a0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  a4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  a8:	08 95       	ret

000000aa <ADC_Init>:

void ADC_Init(void)
{
  // die Versorgungsspannung AVcc als Referenz w�hlen:
  ADMUX = (1<<REFS0);    
  aa:	80 e4       	ldi	r24, 0x40	; 64
  ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  // oder interne Referenzspannung als Referenz f�r den ADC w�hlen:
  // ADMUX = (1<<REFS1) | (1<<REFS0);

  // Bit ADFR ("free running") in ADCSRA steht beim Einschalten
  // schon auf 0, also single conversion
  ADCSRA = (1<<ADPS1) | (1<<ADPS0);     // Frequenzvorteiler
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	80 83       	st	Z, r24
  ADCSRA |= (1<<ADEN);                  // ADC aktivieren
  b8:	80 81       	ld	r24, Z
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	80 83       	st	Z, r24

  /* nach Aktivieren des ADC wird ein "Dummy-Readout" empfohlen, man liest
     also einen Wert und verwirft diesen, um den ADC "warmlaufen zu lassen" */

  ADCSRA |= (1<<ADSC);                  // eine ADC-Wandlung 
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 83       	st	Z, r24
  while (ADCSRA & (1<<ADSC) ) {         // auf Abschluss der Konvertierung warten
  c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c8:	86 fd       	sbrc	r24, 6
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <ADC_Init+0x1a>
  }
  /* ADCW muss einmal gelesen werden, sonst wird Ergebnis der n�chsten
     Wandlung nicht �bernommen. */
  (void) ADCW;
  cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  d4:	08 95       	ret

000000d6 <setOutput>:
}


int setOutput(uint16_t adcValue){

  int leds = round(10 * (adcValue/1024)); 
  d6:	69 2f       	mov	r22, r25
  d8:	66 95       	lsr	r22
  da:	66 95       	lsr	r22
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	66 0f       	add	r22, r22
  e0:	77 1f       	adc	r23, r23
  e2:	cb 01       	movw	r24, r22
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	68 0f       	add	r22, r24
  ee:	79 1f       	adc	r23, r25
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <__floatunsisf>
  f8:	0e 94 37 01 	call	0x26e	; 0x26e <round>
  fc:	0e 94 9b 00 	call	0x136	; 0x136 <__fixsfsi>
  switch (leds)
 100:	61 30       	cpi	r22, 0x01	; 1
 102:	71 05       	cpc	r23, r1
 104:	21 f4       	brne	.+8      	; 0x10e <setOutput+0x38>
  {
  case 1:
     PORTD |= 1<<2;
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	84 60       	ori	r24, 0x04	; 4
 10a:	8b b9       	out	0x0b, r24	; 11
    break;
 10c:	08 95       	ret
  
  default:
     PORTD |= 0<<2;
 10e:	8b b1       	in	r24, 0x0b	; 11
 110:	8b b9       	out	0x0b, r24	; 11
    break;
  }
	
}
 112:	08 95       	ret

00000114 <main>:

int main(void){
	ADC_Init();
 114:	0e 94 55 00 	call	0xaa	; 0xaa <ADC_Init>
	
	int ADCvalue = 0;
	
    while (1) 
    {
		ADCvalue = ADC_Read(0);
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 40 00 	call	0x80	; 0x80 <ADC_Read>
		setOutput(ADCvalue);
 11e:	0e 94 6b 00 	call	0xd6	; 0xd6 <setOutput>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	83 ed       	ldi	r24, 0xD3	; 211
 126:	90 e3       	ldi	r25, 0x30	; 48
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x14>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x1e>
 132:	00 00       	nop
 134:	f1 cf       	rjmp	.-30     	; 0x118 <main+0x4>

00000136 <__fixsfsi>:
 136:	0e 94 a2 00 	call	0x144	; 0x144 <__fixunssfsi>
 13a:	68 94       	set
 13c:	b1 11       	cpse	r27, r1
 13e:	0c 94 31 01 	jmp	0x262	; 0x262 <__fp_szero>
 142:	08 95       	ret

00000144 <__fixunssfsi>:
 144:	0e 94 16 01 	call	0x22c	; 0x22c <__fp_splitA>
 148:	88 f0       	brcs	.+34     	; 0x16c <__fixunssfsi+0x28>
 14a:	9f 57       	subi	r25, 0x7F	; 127
 14c:	98 f0       	brcs	.+38     	; 0x174 <__fixunssfsi+0x30>
 14e:	b9 2f       	mov	r27, r25
 150:	99 27       	eor	r25, r25
 152:	b7 51       	subi	r27, 0x17	; 23
 154:	b0 f0       	brcs	.+44     	; 0x182 <__fixunssfsi+0x3e>
 156:	e1 f0       	breq	.+56     	; 0x190 <__fixunssfsi+0x4c>
 158:	66 0f       	add	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	88 1f       	adc	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	1a f0       	brmi	.+6      	; 0x168 <__fixunssfsi+0x24>
 162:	ba 95       	dec	r27
 164:	c9 f7       	brne	.-14     	; 0x158 <__fixunssfsi+0x14>
 166:	14 c0       	rjmp	.+40     	; 0x190 <__fixunssfsi+0x4c>
 168:	b1 30       	cpi	r27, 0x01	; 1
 16a:	91 f0       	breq	.+36     	; 0x190 <__fixunssfsi+0x4c>
 16c:	0e 94 30 01 	call	0x260	; 0x260 <__fp_zero>
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	08 95       	ret
 174:	0c 94 30 01 	jmp	0x260	; 0x260 <__fp_zero>
 178:	67 2f       	mov	r22, r23
 17a:	78 2f       	mov	r23, r24
 17c:	88 27       	eor	r24, r24
 17e:	b8 5f       	subi	r27, 0xF8	; 248
 180:	39 f0       	breq	.+14     	; 0x190 <__fixunssfsi+0x4c>
 182:	b9 3f       	cpi	r27, 0xF9	; 249
 184:	cc f3       	brlt	.-14     	; 0x178 <__fixunssfsi+0x34>
 186:	86 95       	lsr	r24
 188:	77 95       	ror	r23
 18a:	67 95       	ror	r22
 18c:	b3 95       	inc	r27
 18e:	d9 f7       	brne	.-10     	; 0x186 <__fixunssfsi+0x42>
 190:	3e f4       	brtc	.+14     	; 0x1a0 <__fixunssfsi+0x5c>
 192:	90 95       	com	r25
 194:	80 95       	com	r24
 196:	70 95       	com	r23
 198:	61 95       	neg	r22
 19a:	7f 4f       	sbci	r23, 0xFF	; 255
 19c:	8f 4f       	sbci	r24, 0xFF	; 255
 19e:	9f 4f       	sbci	r25, 0xFF	; 255
 1a0:	08 95       	ret

000001a2 <__floatunsisf>:
 1a2:	e8 94       	clt
 1a4:	09 c0       	rjmp	.+18     	; 0x1b8 <__floatsisf+0x12>

000001a6 <__floatsisf>:
 1a6:	97 fb       	bst	r25, 7
 1a8:	3e f4       	brtc	.+14     	; 0x1b8 <__floatsisf+0x12>
 1aa:	90 95       	com	r25
 1ac:	80 95       	com	r24
 1ae:	70 95       	com	r23
 1b0:	61 95       	neg	r22
 1b2:	7f 4f       	sbci	r23, 0xFF	; 255
 1b4:	8f 4f       	sbci	r24, 0xFF	; 255
 1b6:	9f 4f       	sbci	r25, 0xFF	; 255
 1b8:	99 23       	and	r25, r25
 1ba:	a9 f0       	breq	.+42     	; 0x1e6 <__floatsisf+0x40>
 1bc:	f9 2f       	mov	r31, r25
 1be:	96 e9       	ldi	r25, 0x96	; 150
 1c0:	bb 27       	eor	r27, r27
 1c2:	93 95       	inc	r25
 1c4:	f6 95       	lsr	r31
 1c6:	87 95       	ror	r24
 1c8:	77 95       	ror	r23
 1ca:	67 95       	ror	r22
 1cc:	b7 95       	ror	r27
 1ce:	f1 11       	cpse	r31, r1
 1d0:	f8 cf       	rjmp	.-16     	; 0x1c2 <__floatsisf+0x1c>
 1d2:	fa f4       	brpl	.+62     	; 0x212 <__floatsisf+0x6c>
 1d4:	bb 0f       	add	r27, r27
 1d6:	11 f4       	brne	.+4      	; 0x1dc <__floatsisf+0x36>
 1d8:	60 ff       	sbrs	r22, 0
 1da:	1b c0       	rjmp	.+54     	; 0x212 <__floatsisf+0x6c>
 1dc:	6f 5f       	subi	r22, 0xFF	; 255
 1de:	7f 4f       	sbci	r23, 0xFF	; 255
 1e0:	8f 4f       	sbci	r24, 0xFF	; 255
 1e2:	9f 4f       	sbci	r25, 0xFF	; 255
 1e4:	16 c0       	rjmp	.+44     	; 0x212 <__floatsisf+0x6c>
 1e6:	88 23       	and	r24, r24
 1e8:	11 f0       	breq	.+4      	; 0x1ee <__floatsisf+0x48>
 1ea:	96 e9       	ldi	r25, 0x96	; 150
 1ec:	11 c0       	rjmp	.+34     	; 0x210 <__floatsisf+0x6a>
 1ee:	77 23       	and	r23, r23
 1f0:	21 f0       	breq	.+8      	; 0x1fa <__floatsisf+0x54>
 1f2:	9e e8       	ldi	r25, 0x8E	; 142
 1f4:	87 2f       	mov	r24, r23
 1f6:	76 2f       	mov	r23, r22
 1f8:	05 c0       	rjmp	.+10     	; 0x204 <__floatsisf+0x5e>
 1fa:	66 23       	and	r22, r22
 1fc:	71 f0       	breq	.+28     	; 0x21a <__floatsisf+0x74>
 1fe:	96 e8       	ldi	r25, 0x86	; 134
 200:	86 2f       	mov	r24, r22
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	2a f0       	brmi	.+10     	; 0x212 <__floatsisf+0x6c>
 208:	9a 95       	dec	r25
 20a:	66 0f       	add	r22, r22
 20c:	77 1f       	adc	r23, r23
 20e:	88 1f       	adc	r24, r24
 210:	da f7       	brpl	.-10     	; 0x208 <__floatsisf+0x62>
 212:	88 0f       	add	r24, r24
 214:	96 95       	lsr	r25
 216:	87 95       	ror	r24
 218:	97 f9       	bld	r25, 7
 21a:	08 95       	ret

0000021c <__fp_split3>:
 21c:	57 fd       	sbrc	r21, 7
 21e:	90 58       	subi	r25, 0x80	; 128
 220:	44 0f       	add	r20, r20
 222:	55 1f       	adc	r21, r21
 224:	59 f0       	breq	.+22     	; 0x23c <__fp_splitA+0x10>
 226:	5f 3f       	cpi	r21, 0xFF	; 255
 228:	71 f0       	breq	.+28     	; 0x246 <__fp_splitA+0x1a>
 22a:	47 95       	ror	r20

0000022c <__fp_splitA>:
 22c:	88 0f       	add	r24, r24
 22e:	97 fb       	bst	r25, 7
 230:	99 1f       	adc	r25, r25
 232:	61 f0       	breq	.+24     	; 0x24c <__fp_splitA+0x20>
 234:	9f 3f       	cpi	r25, 0xFF	; 255
 236:	79 f0       	breq	.+30     	; 0x256 <__fp_splitA+0x2a>
 238:	87 95       	ror	r24
 23a:	08 95       	ret
 23c:	12 16       	cp	r1, r18
 23e:	13 06       	cpc	r1, r19
 240:	14 06       	cpc	r1, r20
 242:	55 1f       	adc	r21, r21
 244:	f2 cf       	rjmp	.-28     	; 0x22a <__fp_split3+0xe>
 246:	46 95       	lsr	r20
 248:	f1 df       	rcall	.-30     	; 0x22c <__fp_splitA>
 24a:	08 c0       	rjmp	.+16     	; 0x25c <__fp_splitA+0x30>
 24c:	16 16       	cp	r1, r22
 24e:	17 06       	cpc	r1, r23
 250:	18 06       	cpc	r1, r24
 252:	99 1f       	adc	r25, r25
 254:	f1 cf       	rjmp	.-30     	; 0x238 <__fp_splitA+0xc>
 256:	86 95       	lsr	r24
 258:	71 05       	cpc	r23, r1
 25a:	61 05       	cpc	r22, r1
 25c:	08 94       	sec
 25e:	08 95       	ret

00000260 <__fp_zero>:
 260:	e8 94       	clt

00000262 <__fp_szero>:
 262:	bb 27       	eor	r27, r27
 264:	66 27       	eor	r22, r22
 266:	77 27       	eor	r23, r23
 268:	cb 01       	movw	r24, r22
 26a:	97 f9       	bld	r25, 7
 26c:	08 95       	ret

0000026e <round>:
 26e:	0e 94 16 01 	call	0x22c	; 0x22c <__fp_splitA>
 272:	e8 f0       	brcs	.+58     	; 0x2ae <round+0x40>
 274:	9e 37       	cpi	r25, 0x7E	; 126
 276:	e8 f0       	brcs	.+58     	; 0x2b2 <round+0x44>
 278:	96 39       	cpi	r25, 0x96	; 150
 27a:	b8 f4       	brcc	.+46     	; 0x2aa <round+0x3c>
 27c:	9e 38       	cpi	r25, 0x8E	; 142
 27e:	48 f4       	brcc	.+18     	; 0x292 <round+0x24>
 280:	67 2f       	mov	r22, r23
 282:	78 2f       	mov	r23, r24
 284:	88 27       	eor	r24, r24
 286:	98 5f       	subi	r25, 0xF8	; 248
 288:	f9 cf       	rjmp	.-14     	; 0x27c <round+0xe>
 28a:	86 95       	lsr	r24
 28c:	77 95       	ror	r23
 28e:	67 95       	ror	r22
 290:	93 95       	inc	r25
 292:	95 39       	cpi	r25, 0x95	; 149
 294:	d0 f3       	brcs	.-12     	; 0x28a <round+0x1c>
 296:	b6 2f       	mov	r27, r22
 298:	b1 70       	andi	r27, 0x01	; 1
 29a:	6b 0f       	add	r22, r27
 29c:	71 1d       	adc	r23, r1
 29e:	81 1d       	adc	r24, r1
 2a0:	20 f4       	brcc	.+8      	; 0x2aa <round+0x3c>
 2a2:	87 95       	ror	r24
 2a4:	77 95       	ror	r23
 2a6:	67 95       	ror	r22
 2a8:	93 95       	inc	r25
 2aa:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__fp_mintl>
 2ae:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__fp_mpack>
 2b2:	0c 94 31 01 	jmp	0x262	; 0x262 <__fp_szero>

000002b6 <__fp_mintl>:
 2b6:	88 23       	and	r24, r24
 2b8:	71 f4       	brne	.+28     	; 0x2d6 <__fp_mintl+0x20>
 2ba:	77 23       	and	r23, r23
 2bc:	21 f0       	breq	.+8      	; 0x2c6 <__fp_mintl+0x10>
 2be:	98 50       	subi	r25, 0x08	; 8
 2c0:	87 2b       	or	r24, r23
 2c2:	76 2f       	mov	r23, r22
 2c4:	07 c0       	rjmp	.+14     	; 0x2d4 <__fp_mintl+0x1e>
 2c6:	66 23       	and	r22, r22
 2c8:	11 f4       	brne	.+4      	; 0x2ce <__fp_mintl+0x18>
 2ca:	99 27       	eor	r25, r25
 2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <__fp_mintl+0x32>
 2ce:	90 51       	subi	r25, 0x10	; 16
 2d0:	86 2b       	or	r24, r22
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	2a f0       	brmi	.+10     	; 0x2e2 <__fp_mintl+0x2c>
 2d8:	9a 95       	dec	r25
 2da:	66 0f       	add	r22, r22
 2dc:	77 1f       	adc	r23, r23
 2de:	88 1f       	adc	r24, r24
 2e0:	da f7       	brpl	.-10     	; 0x2d8 <__fp_mintl+0x22>
 2e2:	88 0f       	add	r24, r24
 2e4:	96 95       	lsr	r25
 2e6:	87 95       	ror	r24
 2e8:	97 f9       	bld	r25, 7
 2ea:	08 95       	ret

000002ec <__fp_mpack>:
 2ec:	9f 3f       	cpi	r25, 0xFF	; 255
 2ee:	31 f0       	breq	.+12     	; 0x2fc <__fp_mpack_finite+0xc>

000002f0 <__fp_mpack_finite>:
 2f0:	91 50       	subi	r25, 0x01	; 1
 2f2:	20 f4       	brcc	.+8      	; 0x2fc <__fp_mpack_finite+0xc>
 2f4:	87 95       	ror	r24
 2f6:	77 95       	ror	r23
 2f8:	67 95       	ror	r22
 2fa:	b7 95       	ror	r27
 2fc:	88 0f       	add	r24, r24
 2fe:	91 1d       	adc	r25, r1
 300:	96 95       	lsr	r25
 302:	87 95       	ror	r24
 304:	97 f9       	bld	r25, 7
 306:	08 95       	ret

00000308 <_exit>:
 308:	f8 94       	cli

0000030a <__stop_program>:
 30a:	ff cf       	rjmp	.-2      	; 0x30a <__stop_program>
