
Lab4Auf1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f8  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000655  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000232  00000000  00000000  00000f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000383  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  0000159b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001666  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 77 00 	call	0xee	; 0xee <main>
  88:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <startConversion>:

uint16_t analogWert = 0;

void startConversion(){
	// Startet die Auslesung
	ADCSRA |= (1 << ADSC); 
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <__vector_21>:
}
//ADC fertig mit Auslesen
ISR(ADC_vect){ 
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	2f 93       	push	r18
  a8:	3f 93       	push	r19
  aa:	4f 93       	push	r20
  ac:	5f 93       	push	r21
  ae:	6f 93       	push	r22
  b0:	7f 93       	push	r23
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	af 93       	push	r26
  b8:	bf 93       	push	r27
  ba:	ef 93       	push	r30
  bc:	ff 93       	push	r31

	PORTB = 0;
  be:	15 b8       	out	0x05, r1	; 5
	PORTD = 0;
  c0:	1b b8       	out	0x0b, r1	; 11
	//oberen und unteren bytes trennen
	// obere:  0000 1111
	// untere: 1111 1100

	//bytes die Ausgänge zuweisen
	PORTB = (value & 0xFF00);
  c2:	15 b8       	out	0x05, r1	; 5
	PORTD = (value & 0x00FF);
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	8b b9       	out	0x0b, r24	; 11
	// ADC Wert auslesen
	startConversion(); 
  c8:	0e 94 48 00 	call	0x90	; 0x90 <startConversion>
}
  cc:	ff 91       	pop	r31
  ce:	ef 91       	pop	r30
  d0:	bf 91       	pop	r27
  d2:	af 91       	pop	r26
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	7f 91       	pop	r23
  da:	6f 91       	pop	r22
  dc:	5f 91       	pop	r21
  de:	4f 91       	pop	r20
  e0:	3f 91       	pop	r19
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <main>:

int main(void){
  //Richtung der Ausgänge setzen
	DDRD = 0xFF;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
  f2:	84 b9       	out	0x04, r24	; 4
	//oberen und unteren bytes trennen
	// obere:  0000 1111
	// untere: 1111 1100

	//bytes die Ausgänge zuweisen
	PORTB = (value >> 8);
  f4:	85 b9       	out	0x05, r24	; 5
	PORTD = (value & 0x00FF);
  f6:	8b b9       	out	0x0b, r24	; 11

  //ADC init.
  //(A5) und externe REF - Spannung
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); 
  f8:	85 e4       	ldi	r24, 0x45	; 69
  fa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// Enable - ADC Interrupt - ADC Prescaler auf 4
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS1) | (1 << ADPS2) | (1 << ADPS0);
  fe:	8f e8       	ldi	r24, 0x8F	; 143
 100:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	// Input aktivieren (A5)
	DIDR0 = (1 << ADC5D);
 104:	80 e2       	ldi	r24, 0x20	; 32
 106:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	// ADC Wert auslesen
	startConversion();
 10a:	0e 94 48 00 	call	0x90	; 0x90 <startConversion>
	//global interrupt an
	sei(); 
 10e:	78 94       	sei
 110:	ff cf       	rjmp	.-2      	; 0x110 <main+0x22>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
